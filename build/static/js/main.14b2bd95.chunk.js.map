{"version":3,"sources":["components/Pixel.tsx","components/PixelBitmap.tsx","graphics/bitmaps/alphabetMap.js","components/Portfolio.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Pixel","props","useState","hidden","setHidden","useEffect","setTimeout","wait","style","width","pixelSize","height","backgroundColor","fill","position","paddingTop","y","left","x","top","PixelBitmap","bitmap","colormap","className","rowDelay","other","rows","length","delay","map","row","rowIndex","bit","index","className2","Array","isArray","alphabet","K","M","animation","colorMap","0","1","2","Portfolio","Box","m","Grid","container","justify","spacing","item","Typography","variant","align","padding","theme","createMuiTheme","palette","primary","light","main","dark","contrastText","secondary","SimpleTabs","darkMode","setDarkMode","ThemeProvider","AppBar","Toolbar","Switch","checked","onChange","float","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.14b2bd95.chunk.js","sourcesContent":["import { CSSProperties, ReactEventHandler, useEffect, useState } from \"react\";\r\nimport { clearTimeout } from \"timers\";\r\n\r\ninterface PixelProps {\r\n  x: number;\r\n  y: number;\r\n  pixelSize: number;\r\n  fill: string;\r\n  className?: string;\r\n  style?: object;\r\n  wait?: number;\r\n}\r\n\r\nexport default function Pixel(props: PixelProps) {\r\n  const [hidden, setHidden] = useState(true);\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      setHidden(false);\r\n    }, props.wait || 0);\r\n    // return () => {\r\n    // \tclearTimeout(timer);\r\n    // }\r\n  });\r\n\r\n  // return !hidden ? <rect width=\"1\" height=\"1\" shapeRendering=\"crispEdges\" {...props} /> : <></>;\r\n  return !hidden ? (\r\n    <div\r\n      style={{\r\n        width: props.pixelSize,\r\n        height: props.pixelSize,\r\n        backgroundColor: props.fill,\r\n\t\t\t\tposition: \"absolute\",\r\n\t\t\t\tpaddingTop: props.y !== 0 ? -props.pixelSize : 0,\r\n\t\t\t\tleft: props.x * props.pixelSize,\r\n\t\t\t\ttop: props.y * props.pixelSize,\r\n      }}\r\n\t\t\t{...props}\r\n    />\r\n  ) : (\r\n    <></>\r\n  );\r\n}\r\n","import Svg from \"./Svg\";\r\nimport Pixel from \"./Pixel\";\r\nimport React from \"react\";\r\n\r\ninterface PixelProps {\r\n  bitmap: number[][];\r\n  pixelSize: number;\r\n  colormap: { [key: number]: string };\r\n  animate?: boolean;\r\n  className?: string | string[][];\r\n  rowDelay?: number;\r\n}\r\n\r\nexport default function PixelBitmap(props: PixelProps) {\r\n  const { bitmap, pixelSize, colormap, className, rowDelay, ...other} = props;\r\n  const rows = bitmap.length;\r\n  const columns = bitmap[0].length;\r\n  const width = columns * pixelSize;\r\n  const height = rows * pixelSize;\r\n  var delay = rowDelay ? 1 + rowDelay : 0;\r\n\r\n  return (\r\n    <div style={{width: width, height: height, position: \"relative\"}} {...other}>\r\n      {bitmap.map((row: number[], rowIndex: number) => {\r\n        return row.map((bit: number, index: number) => {\r\n          if (rowDelay) delay += rowDelay;\r\n          var className2 = Array.isArray(className) ? className[rowIndex][index] : className;\r\n          return (\r\n            <Pixel\r\n              key={index}\r\n              x={index}\r\n              y={rowIndex}\r\n              pixelSize={pixelSize}\r\n              fill={colormap[bit]}\r\n              wait={delay}\r\n              className={\r\n                className && \"animate__animated \" + className2\r\n              }\r\n            />\r\n          );\r\n        });\r\n      })}\r\n    </div>\r\n    // <Svg width={240} height={320} viewBox={`0 0 ${rows} ${columns}`}>\r\n    //   {bitmap.map((row: number[], rowIndex: number) => {\r\n    //     return row.map((bit: number, index: number) => {\r\n    //       if (rowDelay) delay += rowDelay;\r\n    //       var className2 = Array.isArray(className) ? className[rowIndex][index] : className;\r\n    //       return (\r\n    //         <Pixel\r\n    //           key={index}\r\n    //           x={index}\r\n    //           y={rowIndex}\r\n    //           fill={colormap[bit]}\r\n    //           wait={delay}\r\n    //           className={\r\n    //             className && \"animate__animated \" + className2\r\n    //           }\r\n    //         />\r\n    //       );\r\n    //     });\r\n    //   })}\r\n    // </Svg>\r\n  );\r\n}\r\n","const alphabet = {\r\n  K: [\r\n    [1, 1, 2, 0, 0, 0, 1, 1, 2],\r\n    [1, 1, 2, 0, 0, 1, 1, 1, 2],\r\n    [1, 1, 2, 0, 1, 1, 1, 2, 2],\r\n    [1, 1, 2, 1, 1, 1, 2, 2, 0],\r\n    [1, 1, 1, 1, 1, 2, 2, 0, 0],\r\n    [1, 1, 1, 1, 1, 2, 0, 0, 0],\r\n    [1, 1, 2, 1, 1, 1, 2, 0, 0],\r\n    [1, 1, 2, 2, 1, 1, 1, 2, 0],\r\n    [1, 1, 2, 0, 2, 1, 1, 1, 2],\r\n    [1, 1, 2, 0, 0, 2, 1, 1, 2],\r\n    [2, 2, 2, 0, 0, 0, 2, 2, 2],\r\n  ],\r\n  M: [\r\n    [1, 1, 2, 0, 0, 0, 1, 1, 2],\r\n    [1, 1, 1, 2, 0, 1, 1, 1, 2],\r\n    [1, 1, 1, 1, 1, 1, 1, 1, 2],\r\n    [1, 1, 1, 1, 1, 1, 1, 1, 2],\r\n    [1, 1, 2, 1, 1, 2, 1, 1, 2],\r\n    [1, 1, 2, 2, 2, 2, 1, 1, 2],\r\n    [1, 1, 2, 0, 0, 0, 1, 1, 2],\r\n    [1, 1, 2, 0, 0, 0, 1, 1, 2],\r\n    [1, 1, 2, 0, 0, 0, 1, 1, 2],\r\n    [1, 1, 2, 0, 0, 0, 1, 1, 2],\r\n    [2, 2, 2, 0, 0, 0, 2, 2, 2],\r\n  ],\r\n};\r\n\r\nexport default alphabet;\r\n","import React from \"react\";\r\nimport {\r\n  Box,\r\n  Container,\r\n  Grid,\r\n  makeStyles,\r\n  Paper,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport PixelBitmap from \"./PixelBitmap\";\r\nimport alphabet from '../graphics/bitmaps/alphabetMap.js';\r\n\r\n// const animation = \"animate__slow animate__backInLeft\";\r\n// const animation = \"animate__slow animate__flip\";\r\nconst animation = \"animate__slow animate__flipInY\";\r\n\r\nconst colorMap: { [key: number]: string } = {\r\n  0: \"#00000000\",\r\n  1: \"#5f5fc4\",\r\n  2: \"#001064\",\r\n};\r\n\r\n\r\nexport default function Portfolio() {\r\n  return (\r\n    <Box m={6}>\r\n      <Grid container justify=\"center\" spacing={10}>\r\n        <Grid item>\r\n          <PixelBitmap bitmap={alphabet.K} pixelSize={20} colormap={colorMap} className={animation} rowDelay={10}/>\r\n        </Grid>\r\n        <Grid item>\r\n          <PixelBitmap bitmap={alphabet.M} pixelSize={20} colormap={colorMap} className={animation} rowDelay={10}/>\r\n        </Grid>\r\n      </Grid>\r\n      <Typography variant=\"h5\" align=\"center\" style={{ padding: \"6rem\" }}>\r\n        Projects\r\n      </Typography>\r\n    </Box>\r\n\r\n    // <Box m={6}>\r\n    //   <Grid container justify=\"center\" spacing={2}>\r\n    //     <Grid item>\r\n    //       <PixelBitmap bitmap={K} colormap={colorMap} className={animation} rowDelay={10}/>\r\n    //     </Grid>\r\n    //     <Grid item>\r\n    //       <PixelBitmap bitmap={M} colormap={colorMap} className={animation} rowDelay={10}/>\r\n    //     </Grid>\r\n    //   </Grid>\r\n    //   <Typography variant=\"h5\" align=\"center\" style={{ padding: \"6rem\" }}>\r\n    //     Projects\r\n    //   </Typography>\r\n    // </Box>\r\n  );\r\n}\r\n","import \"./App.css\";\nimport 'animate.css';\nimport React, { useEffect, useState } from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport { createMuiTheme, Switch, ThemeProvider, Toolbar } from \"@material-ui/core\";\n// import Post from \"./components/Post\";\n// import UserType from \"./types/UserType\";\nimport Portfolio from \"./components/Portfolio\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      light: \"#5f5fc4\",\n      main: \"#283593\",\n      dark: \"#001064\",\n      contrastText: \"#ffffff\",\n    },\n    secondary: {\n      light: \"#b2fef7\",\n      main: \"#80cbc4\",\n      dark: \"#4f9a94\",\n      contrastText: \"#000000\",\n    },\n  },\n});\n\nconst useFetch = function (url: string): [[any] | null, boolean] {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    fetchData(url, (data) => {\n      setData(data);\n      setLoading(false);\n    });\n  }, [url]);\n  return [data, loading];\n};\n\nasync function fetchData(\n  url: string,\n  callback: React.Dispatch<React.SetStateAction<null>>\n) {\n  const response = await fetch(url);\n  const json = await response.json();\n  callback(json);\n}\n\nexport default function SimpleTabs() {\n  const [value, setValue] = useState(0);\n  const [darkMode, setDarkMode] = useState(false);\n  \n  const handleTabChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n    setValue(newValue);\n  };\n\n  // const [posts, isPostsLoading] = useFetch(\n  //   \"https://jsonplaceholder.typicode.com/posts\"\n  // );\n  // const [comments, isCommentsLoading] = useFetch(\n  //   \"https://jsonplaceholder.typicode.com/comments\"\n  // );\n  // const [albums, albumsIsLoading] = useFetch(\n  //   \"https://jsonplaceholder.typicode.com/albums\"\n  // );\n  // const [photos, photosIsLoading] = useFetch(\n  //   \"https://jsonplaceholder.typicode.com/photos\"\n  // );\n  // const [todos, todosIsLoading] = useFetch(\n  //   \"https://jsonplaceholder.typicode.com/todos\"\n  // );\n  // const [users, isUsersLoading] = useFetch(\n  //   \"https://jsonplaceholder.typicode.com/users\"\n  // ) as [[UserType] | null, boolean];\n\n  return (\n    <ThemeProvider theme={theme}>\n      <AppBar position=\"sticky\">\n        <Toolbar>\n          \n          <Switch checked={darkMode} onChange={() => setDarkMode(!darkMode)} style={{float: \"inline-end\"}} />\n        </Toolbar>\n        {/* <Tabs\n          value={value}\n          onChange={handleTabChange}\n          aria-label=\"simple tabs example\"\n        >\n          <Tab label=\"Home\" />\n          <Tab label=\"Posts\" />\n          <Tab label=\"Comments\" />\n          <Tab label=\"Albums\" />\n          <Tab label=\"Photos\" />\n          <Tab label=\"Todos\" />\n          <Tab label=\"Users\" />\n        </Tabs> */}\n      </AppBar>\n      <Portfolio />\n      {/* <TabPanel value={value} index={0}>\n      </TabPanel>\n      <TabPanel value={value} index={1}>\n        {isPostsLoading && isCommentsLoading && isUsersLoading ? (\n          <div>Loading...</div>\n        ) : (\n          <List\n            component=\"nav\"\n            aria-label=\"mailbox folders\"\n          >\n            <Post\n              post={posts === null ? null : posts[0]}\n              user={users === null ? null : users[0]}\n              comments={comments === null ? null : comments[0]}\n            />\n          </List>\n        )}\n      </TabPanel>\n      <TabPanel value={value} index={2}>\n        {commentsIsLoading ? <div>Loading...</div> : JSON.stringify(comments)}\n      </TabPanel>\n      <TabPanel value={value} index={3}>\n        {albumsIsLoading ? <div>Loading...</div> : JSON.stringify(albums)}\n      </TabPanel>\n      <TabPanel value={value} index={4}>\n        {photosIsLoading ? <div>Loading...</div> : JSON.stringify(photos)}\n      </TabPanel>\n      <TabPanel value={value} index={5}>\n        {todosIsLoading ? <div>Loading...</div> : JSON.stringify(todos)}\n      </TabPanel>\n      <TabPanel value={value} index={6}>\n        {usersIsLoading ? <div>Loading...</div> : JSON.stringify(users)}\n      </TabPanel> */}\n    </ThemeProvider>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}